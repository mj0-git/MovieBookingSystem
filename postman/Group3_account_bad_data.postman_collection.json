{
	"info": {
		"_postman_id": "46f964b2-00ea-4450-9751-96a864be17a3",
		"name": "Group3_account_bad_data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "no_user_with_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", ()=> {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('No user found in database with id=0');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/0",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_no_username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Registration requires userName');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"lsantic@jh.edu\",\r\n    \"password\":\"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_empty_username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Registration requires userName');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"\",\r\n    \"email\":\"lsantic@jh.edu\",\r\n    \"password\":\"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_no_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Registration requires email');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic\",\r\n    \"password\":\"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_empty_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Registration requires email');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic\",\r\n    \"email\":\"\",\r\n    \"password\":\"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_no_password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Registration requires password');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic\",\r\n    \"email\":\"lsantic@jh.edu\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_empty_password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Registration requires password');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic\",\r\n    \"email\":\"lsantic@jh.edu\",\r\n    \"password\":\"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_duplicate_username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Account with that username already exists');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic1\",\r\n    \"email\":\"lsantic@jh.edu\",\r\n    \"password\":\"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_duplicate_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Account with that email already exists');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic\",\r\n    \"email\":\"lsantic1@jh.edu\",\r\n    \"password\":\"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_bad_phone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Account Object contains invalid fields');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic1\",\r\n    \"email\":\"lsantic1@jh.edu\",\r\n    \"phoneNumber\":\"(123) 456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_bad_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Account Object contains invalid fields');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic\",\r\n    \"email\":\"lsantic1\",\r\n    \"phoneNumber\":\"(123) 456-7890\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_put_empty_username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Account requires userName');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"\",\r\n    \"email\":\"lsantic@jh.edu\",\r\n    \"password\":\"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_put_empty_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Account requires email');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic\",\r\n    \"email\":\"\",\r\n    \"password\":\"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_put_empty_password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Account requires password');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic\",\r\n    \"email\":\"lsantic@jh.edu\",\r\n    \"password\":\"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_put_duplicate_username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Account with that username already exists');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"admin\",\r\n    \"email\":\"lsantic@jh.edu\",\r\n    \"firstName\":\"Lauren\",\r\n    \"lastName\":\"Santichen\",\r\n    \"address\":\"123 Sesame Str. NY\",\r\n    \"phoneNumber\":\"(123) 456-7890\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_put_duplicate_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Account with that email already exists');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic1\",\r\n    \"email\":\"admin@jh.edu\",\r\n    \"firstName\":\"Lauren\",\r\n    \"lastName\":\"Santichen\",\r\n    \"address\":\"123 Sesame Str. NY\",\r\n    \"phoneNumber\":\"(123) 456-7890\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_put_bad_phone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Email or Phone contains invalid pattern');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic1\",\r\n    \"email\":\"lsantic1@jh.edu\",\r\n    \"firstName\":\"Lauren\",\r\n    \"lastName\":\"Santichen\",\r\n    \"address\":\"123 Sesame Str. NY\",\r\n    \"phoneNumber\":\"(123) 456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_put_bad_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\",()=>{\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=>{\r",
							"pm.expect(pm.response.text()).to.eql('Email or Phone contains invalid pattern');});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\":\"lsantic1\",\r\n    \"email\":\"lsantic1\",\r\n    \"firstName\":\"Lauren\",\r\n    \"lastName\":\"Santichen\",\r\n    \"address\":\"123 Sesame Str. NY\",\r\n    \"phoneNumber\":\"(123) 456-7890\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/1",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_no_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", ()=> {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Test Response time max limit\", ()=>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/xml",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Account>\r\n    <userName>lsantic1</userName>\r\n    <email>lsantic1@jh.edu</email>\r\n    <firstName>Lauren</firstName>\r\n    <lastName>Santichen</lastName>\r\n    <address>123 Sesame Str. NY</address>\r\n    <phoneNumber>(123) 456-7890</phoneNumber>\r\n</Account>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user/0",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"0"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user_access}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}